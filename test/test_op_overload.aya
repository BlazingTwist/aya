.# This file tests operator overloading features
.# For testing modules or other aya code, see base/test.aya

{,

  ::vec :__type__;
  1 :__pushself__;

  {l meta, {, l:l} meta :M}:__new__;
  {self, "<" self.lPB;V; ">" ++}:__str__:__repr__;

  {o self, o:T ::vec = {o.l} {o} .? self.l + self.M!}:__add__;
  {self o, self.l o + self.M!}:__radd__;

  {o self, o:T ::vec = {o.l} {o} .? self.l * self.M!}:__mul__;
  {self o, self.l o * self.M!}:__rmul__;

  {o self, o:T ::vec = {o.l} {o} .? self.l - self.M!}:__sub__;
  {self o, self.l o:T ::vec = {o.l} {o} .? - self.M!}:__rsub__;

  {o self, o:T ::vec = {o.l} {o} .? self.l / self.M!}:__div__;
  {self o, self.l o:T ::vec = {o.l} {o} .? / self.M!}:__rdiv__;

  {o self, o:T ::vec = {o.l} {o} .? self.l ^ self.M!}:__pow__;
  {self o, self.l o:T ::vec = {o.l} {o} .? ^ self.M!}:__rpow__;

  {o self, o:T ::vec = {o.l} {o} .? self.l % self.M!}:__mod__;
  {self o, self.l o:T ::vec = {o.l} {o} .? % self.M!}:__rmod__;

  {o self, o:T ::vec = {o.l} {o} .? self.l .% self.M!}:__idiv__;
  {self o, self.l o:T ::vec = {o.l} {o} .? .% self.M!}:__ridiv__;

  {o self, o self.l < self.M!}:__lt__;
  {o self, o self.l > self.M!}:__gt__;
  {o self, o self.l :< self.M!}:__leq__;
  {o self, o self.l :> self.M!}:__geq__;
  {o self, o:T ::vec = {o.l self.l =} 0 .?}:__eq__;

  {self, self.l U self.:l }:__reverse__;
  {self, self.l T self.M!}:__negate__;
  {self, self.l C self.:l }:__sort__;

  {self, self.l #B self.:l}:__inc__;
  {self, self.l #V self.:l}:__dec__;
  {self, self.lE }:__len__;


  {n self, [n,;.Q] self.:l}:__random__;

  {self, self.l M! self.M!}:__fact__;
  {self, self.l Ms self.M!}:__sin__;
  {self, self.l Mc self.M!}:__cos__;
  {self, self.l Mt self.M!}:__tan__;
  {self, self.l MS self.M!}:__asin__;
  {self, self.l MC self.M!}:__acos__;
  {self, self.l MT self.M!}:__atan__;
  {self, self.l Ml self.M!}:__ln__;
  {self, self.l ML self.M!}:__log__;
  {self, self.l Me self.M!}:__exp__;
  {self, self.l .^ self.M!}:__sqrt__;

  {self, self.l #Md self.M!}:__float__;
  {self, self.l #.! self.M!}:__signum__;
  {self, self.l .| self.M!}:__abs__;

  {self n, self.l n .< self.M!}:__head__;
  {self n, self.l n .> self.M!}:__tail__;

  {blk self, self.l :# {blk} self.M! }:__each__;
}:vec;

{v : vec^, vR vec! } vec.:__range__;

.# Use new test
test_.` :test;

"add/radd..." :P
{,
    [1 2 3] vec! :v;
    { v P "< 1 2 3 >" } test
    { 3 v + P "< 4 5 6 >" } test
    { v 3 + P "< 4 5 6 >" } test
    { [10 10 10] v + P "< 11 12 13 >" } test
    { v v + P "< 2 4 6 >" } test
};

"sub/rsub..." :P
{,
    [1 2 3] vec! :v;
    { v P "< 1 2 3 >" } test
    { 3 v - P "< 2 1 0 >" } test
    { v 3 - P "< -2 -1 0 >" } test
    { v v - P "< 0 0 0 >" } test
    { [10 10 10] v - P "< 9 8 7 >" } test
    { v [10 10 10] - P "< -9 -8 -7 >" } test
};

"mul/rmul..." :P
{,
    [1 2 3] vec! :v;
    { 3 v * P "< 3 6 9 >" } test
    { v 3 * P "< 3 6 9 >" } test
    { [10 10 10] v * P "< 10 20 30 >" } test
    { v [10 10 10] * P "< 10 20 30 >" } test
    { v v * P "< 1 4 9 >" } test
};

"div/rdiv..." :P
{,
    [1 2 3] vec! :v;
    { [2 4 6] vec! :v P "< 2 4 6 >" } test
    { 24 v / P "< 12 6 4 >" } test
    { v 2 / P "< 1 2 3 >" } test
    { [24 24 24] v / P "< 12 6 4 >" } test
    { v [2 2 2] / P "< 1 2 3 >" } test
    { v v / P "< 1 1 1 >" } test
};



"mod/rmod..." :P
{,
    [1 2 3] vec! :v;
    { 2 v % P "< 0 0 2 >" } test
    { v 2 % P "< 1 0 1 >" } test
    { [2 2 2] v % P "< 0 0 2 >" } test
    { v [2 2 2] % P "< 1 0 1 >" } test
    { v v % P "< 0 0 0 >" } test
};


"idiv/rdiv..." :P
{,
    [1 2 3] vec! :v;
    { 2 v .% P "< 2 1 0 >" } test
    { v 2 .% P "< 0 1 1 >" } test
    { [2 2 2] v .% P "< 2 1 0 >" } test
    { v [2 2 2] .% P "< 0 1 1 >" } test
    { v v .% P "< 1 1 1 >" } test
};

"lt..." :P
{,
    [1 2 3] vec! :v;
    { 3 `< v P "< 0 0 0 >" } test
    { [3 3 3] `< v P "< 0 0 0 >" } test
};

"gt..." :P
{,
    [1 2 3] vec! :v;
    { 3 `> v P "< 1 1 0 >" } test
    { [3 3 3] `> v P "< 1 1 0 >" } test
};

"leq..." :P
{,
    [1 2 3] vec! :v;
    { 3 `:< v P "< 0 0 1 >" } test
    { [3 3 3] `:< v P "< 0 0 1 >" } test
};

"geq..." :P
{,
    [1 2 3] vec! :v;
    { 3 `:> v P "< 1 1 1 >" } test
    { [3 3 3] `:> v P "< 1 1 1 >" } test
};

"eq..." :P
{,
    [1 2 3] vec! :v;
    { (v v =) 1 } test
    { (v v1+ =) 0 } test
    { (1 v =) 0 } test
};


"reverse..." :P
{,
    [1 2 3] vec! :v;
    { v U P "< 3 2 1 >" } test
};

"negate..." :P
{,
    [1 2 3] vec! :v;
    { v T P "< -1 -2 -3 >" } test
};

"sort..." :P
{,
    { [6 7 4 5 3] vec! :v P "< 6 7 4 5 3 >" } test
    { v C P "< 3 4 5 6 7 >" } test
};

"inc..." :P
{,
    [1 2 3] vec! :v;
    { v BB P "< 3 4 5 >" } test
};

"dec..." :P
{,
    [1 2 3] vec! :v;
    { v VV P "< -1 0 1 >" } test
};

"len..." :P
{,
    [1 2 3] vec! :v;
    { v E 3 } test
};

"range..." :P
{,
    {3 vecR P "< 1 2 3 >" } test
    {[3 6] vec R P "< 3 4 5 6 >" } test
};

"random..." :P
{,
    [] vec! :v;
    { 3 v Q .__len__ 3 } test
};


"each..." :P
{,
    [1 2 3] vec! :v;
    { v :# {1+} P "< 2 3 4 >" } test
};


"math..." :P
{,
    [0 1] vec! :v;
    { v M! P "< 1 1 >" } test
    { v Ms P "< 0 .84147098 >" } test
    { v Mc P "< 1 .54030231 >" } test
    { v Mt P "< 0 1.55740772 >" } test
    { v MS P "< 0 1.57079633 >" } test
    { v MC P "< 1.57079633 0 >" } test
    { v MT P "< 0 .78539816 >" } test
};

{,
    [1 2] vec! :v;
    { v Ml P "< 0 .69314718 >" } test
    { v ML P "< 0 .30103 >" } test
    { v Me P "< 2.71828183 7.3890561 >" } test
    { v .^ P "< 1 1.41421356 >" } test
};

{,
    [:2 1 0 :3.4] vec! :v;
    { v .| P "< 2 1 0 3.4 >" } test
    { v .! P "< -1 1 0 -1 >" } test
};

{,
    [:2r3 :2z 2] vec! :v;
    { v Md .l #:T [::num ::num ::num] } test
};

"head/tail..." :P
{,
    [1 2 3 4 5] vec! :v;
    { v 3 .> P "< 3 4 5 >" } test
    { v 3 .< P "< 1 2 3 >" } test
};


"scope..." :P
vec:foo;
0 :vec; .# Vec no longer exists in global scope
{ [1 2 3] foo! P "< 1 2 3 >" } test
foo:vec;
