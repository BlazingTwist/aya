.# Syntax checks
.###############

{ 1 {?=, 1 "a", 2 "b", "c"} "a" } test.test
{ 2 {?=, 1 "a", 2 "b", "c"} "b" } test.test
{ 3 {?=, 1 "a", 2 "b", "c"} "c" } test.test
{ [3 {?=, 1 "a", 2 "b"}]    []  } test.test

{ 1 {?=, 1 "a"}     "a" } test.test
{ [ 3 {?=, 1 "a"} ] []  } test.test
{ [ 3 {?=, 1 "a"} ] []  } test.test

{:x(1), {0? x, 1= "a", 2= "b", "c"} "a"} test.test
{:x(2), {0? x, 1= "a", 2= "b", "c"} "b"} test.test
{:x(3), {0? x, 1= "a", 2= "b", "c"} "c"} test.test

{:x(1), {0?= x, 1 "a", 2 "b", "c"} "a" } test.test
{:x(2), {0?= x, 1 "a", 2 "b", "c"} "b" } test.test
{:x(3), {0?= x, 1 "a", 2 "b", "c"} "c" } test.test

.# Rule for A {?B, C ... }: {C A B}
{ 1 {?(1+=),  0 "a", 1 "b", "c"} "a" } test.test
{ 1 {?(\1+=), 0 "a", 1 "b", "c"} "c" } test.test
{ 1 {?{1+=},  0 "a", 1 "b", "c"} "a" } test.test
{ 1 {?{\1+=}, 0 "a", 1 "b", "c"} "c" } test.test

.# Capture order
{:x, 1 2 3 {3?, .A:x0 0} x [1 2 3]} test.test
{:x, 1 2   {2?, .A:x0 0} x [1 2  ]} test.test
{:x, 1     {1?, .A:x0 0} x [1    ]} test.test
{:x, 1     { ?, .A:x0 0} x [1    ]} test.test
{:x,       {0?, .A:x0 0} x []     } test.test




.# if/else variants
.##################

{: secret(5) guess f,
    {
        {0?, (guess secret >) {"too big"},
             (guess secret <) {"too small"},
                              {"correct"}}
    }:f;

    { 3 :guess; f "too small" } test.test
    { 7 :guess; f "too big"   } test.test
    { 5 :guess; f "correct"   } test.test
}~

{: secret(5) guess f,
    {
        guess {?, (secret >) {"too big"},
                   secret <  {"too small"},
                             {"correct"}}
    }:f;

    { 3 :guess; f "too small" } test.test
    { 7 :guess; f "too big"   } test.test
    { 5 :guess; f "correct"   } test.test
}~

{: secret(5) guess f,
    {
        {0? guess, (secret >) {"too big"},
                    secret <  {"too small"},
                              {"correct"}}
    }:f;

    { 3 :guess; f "too small" } test.test
    { 7 :guess; f "too big"   } test.test
    { 5 :guess; f "correct"   } test.test
}~

{: secret(5) guess f,
    {
        {0? guess secret, > {"too big"},
                          < {"too small"},
                            {"correct"}}
    }:f;

    { 3 :guess; f "too small" } test.test
    { 7 :guess; f "too big"   } test.test
    { 5 :guess; f "correct"   } test.test
}~

.{ Fail: stack captures are popped in wrong order
{: secret(5) guess f,
    {
        guess secret {2?, > {"too big"},
                          < {"too small"},
                            {"correct"}}
    }:f;

    { 3 :guess; f "too small" } test.test
    { 7 :guess; f "too big"   } test.test
    { 5 :guess; f "correct"   } test.test
}~
.}




