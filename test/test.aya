.# This file tests the core language features. For testing modules or
.#   other aya code, see base/test.aya

"Test file loaded!\n" .P

.#? E assert L\n  Evaluates E as a list, throws an error if [E~] != L
{`({blk::block expected::list,
  {:blk^, [blk] expected} test.test
})}:assert;

{blk::block,
    .; .# Clear stack
    {blk} {;::__fail} .K .A [::__fail] =! {
        "assertfail: code $(blk.`) should have failed but did not" .D
    } ?
}:assertfail;

{1} assert [1]
{ "fail".D } assertfail

{fname,
    {, 
    "* Running tests '$fname'..." :P
    load fname
    "  Tests complete: '$fname'" :P
    };
}:load_test;

.# Run tests in their own scope
"test/core" load_test
"test/list" load_test
"test/ops" load_test
"test/dot_ops" load_test
"test/colon_ops" load_test
"test/range" load_test
"test/unicode" load_test
"test/test_op_overload" load_test

.# Base
"test/base/test_sym" load_test
"test/base/test_num" load_test
"test/base/test_char" load_test
"test/base/test_list" load_test
"test/base/test_str" load_test
"test/base/test_block" load_test

.# Std
[
    "color"
    "date"
    "enum"
    "csv"
    "io"
    "map"
    "matrix"
    "set"
    "stats"
    "stack"
] :# {mod,
    {, "test/std/test_$mod" load_test };
};

.# Import entire standard library
"Importing standard library..." :P
:{sys.wd} "/std"+ :{sys.readdir}:# {"\.aya"|S} :# {name, "importing $name...":P import name} ;
"Import finished!" :P
"":P

.# Also load and auto-run many examples
"test/examples" load_test
