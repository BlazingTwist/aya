{@ plot,

  {@axis, 
    attr "x y"
    {minN maxN,
      [min max] plot.axis MO
    }:new;
  }
  
  .# Plot types
  0:tline;     .#? plot.tline\n  line plot type id
  1:tscatter;  .#? plot.tscatter\n  scatter plot type id

  """
    type
    width
    height
    title
    xlabel
    ylabel
    legend
    xaxis
    yaxis
    xvals
    series
  """:fieldnames;

  attr fieldnames


  .#? plot.new\n  create a new plot instance with default settings
  {:plt,
    [plot.fieldnamesE,0] plot MO :plt;
    
    plot.tline  plt.settype
    500         plt.setwidth
    400         plt.setheight
    ""          plt.settitle
    ""          plt.setxlabel
    ""          plt.setylabel
    []          plt.setxvals
    []          plt.setseries
    T           plt.setlegend
    0           plt.setxaxis
    0           plt.setyaxis
    
    plt
  }:new;

  .#? (plot) plot.view\n  view the plot in a new window
  {self,
    self.propertylist MX
  }:view;

  .#? S (plot) plot.save\n  save the plot as a PNG in the working directory with the name S
  {filename self,
    self.propertylist
    ["filename" filename] AK
    ["show" F ] AK
    self.data
    MX
  }:save;

  .#? L<N> (plot) plot.addline\n  add a data set to the plot
  {listL self,
    if (list'N#isa {&}U) {
      self.data list AK self.setdata
      self.colorlist self.nextcolor.rgbAK self.setcolorlist
      self.strokes 1.5K self.setstrokes
    } {
      "plot.addline: data is not valid. received:\n$list"
    }
  }:addline;

  {dataL self,
    data self.setxvals
  }:domain;
  
  {nameS strokeN colorL dataL self,
    self.series [name stroke color data] AK;
  }:addseries;
  
  {nameS strokeN colorL exprE self,
    self.series [name stroke color [self.xvals, expr]] AK;
  }:addexpr;
  
  .{
  .#? NNE (plot) plot.addexpr\n  evaluate E on the domain of N1 to N2 and add it to the plot
  {xminN xmaxN exprE self,
    xmin xmax 600.1 linspace #expr self.addline
  }:addexpr;
  .}

  .#? NNL<E> plot.quickplot\n  draw a plot from N1 to N2 of expressions L
  {plot.expr.view}:quickplot;

  .#? NNL<E> plot.expr\n  create a plot instance whos data is the expressions L
  {startN endN exprL : points plt,
    start end 600.1 linspace :points;
    plot!:plt;
    expr # {points\#{~}} plt.setdata
    plt
  }:expr;

  {"Plot Instance"}:show;

  .###################
  .# UTIL FUNCTIONS
  .###################

  .# return a property list for this plot
  {self,
    [
      ["width" self.width]
      ["height" self.height]
      ["title" self.title]
      ["xlabel" self.xlabel]
      ["ylabel" self.ylabel]
      ["legend" self.legend] 
      
      self.xaxis 0=! then {
        ["xaxis" [self.xaxis.min self.xaxis.max]]
      }
        
      self.yaxis 0=! then {
        ["yaxis" [self.yaxis.min self.yaxis.max]]
      }

      ["x" self.xvals]
      ["y" self.series]
    ]
  }:propertylist;

 {:p,plot!:p;p.addline p.view}:line;

} .# END plot

{plot.quickplot}:qp;




.{? Plotting Example
plot!:p;

5 colors.green [0dy3,Ms] p.addcustomline

[0dy3,Mc] p.addline

[0dy3,sqrt] p.addline

7 colors.aqua [0dy3,exp10/] p.addcustomline

"Some Plots" p.settitle
"Data from 0 to 3" p.setxlabel
true p.setcentery
300 p.setwidth
250 p.setheight

p.view

"Some Plots" p.save
.}
