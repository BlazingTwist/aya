import ::color

class ::canvas

impl canvas::__init__ {params::dict self ,

    .# Default values
    {,
        400 :width
        400 :height
        "Canvas" :name
        0 :autoflush
        0 :show
        colors.white :bg
        colors.black :fg
        params W
    }:params;

    params.width self.:width;
    params.height self.:height;

    ::new params 0 MG self.:id ;
}.where{,
    colors :colors
}

impl canvas::__str__ {self,
    "<canvas($(self.id))>"
}

(canvas.__str__.`,0); canvas.:__repr__;

impl canvas::delay {self,
    self._delay_ms 0 > {self._delay_ms$:P :Z} ?
}

impl canvas::line {xa ya xb yb self,
    ::line {, xa:xa ya:ya xb:xb yb:yb } self.id MG ;
}

impl canvas::point {x y self,
    ::line {, x:xa:xb y:ya:yb} self.id MG ;
}

impl canvas::circle {x y r self,
    ::ellipse {, x:x y:y r2*:w:h } self.id MG ;
}

impl canvas::fillcircle {x y r self,
    ::ellipse {, 1:fill x:x y:y r2*:w:h } self.id MG ;
}

impl canvas::set_color {color self,
    ::set_color {, color.r:r color.g:g color.b:b } self.id MG ;
}

impl canvas::set_alpha {a self,
    ::set_alpha {, a:a } self.id MG ;
}

impl canvas::set_grad {start ca end cb cycle self,
    ::set_paint {, start.[0]:xa start.[1]:ya ca:start
                   end.[0]:xb   end.[1]:yb   cb:end
                   cycle:cycle ::grad:type } self.id MG ;
}

impl canvas::set_bg {color self, 
    ::set_bg {, color.r:r color.g:g color.b:b } self.id MG ;
}

impl canvas::save {filename self,
    ::save {,
        .# Convert to string (in case it is a path object)
        filename P
        .# Add file extension if it does not exist
        :&"\\.png"&E{}{".png"+}.?
        .# use as path
        :file
    } self.id MG ;
}

impl canvas::close {self,
    ::close {,} self.id MG ;
}

impl canvas::show {self,
    ::show {,} self.id MG ;
}

impl canvas::isopen {self,
    ::isopen {,} self.id MG
}

impl canvas::rect {x y w h self,

    ::rect {, x:x y:y w:w h:h } self.id MG ;
}

impl canvas::fillrect {x y w h self,
    ::rect {, x:x y:y w:w h:h 1:fill} self.id MG ;
}

impl canvas::clear {self,
    ::clear {,} self.id MG ;
}
