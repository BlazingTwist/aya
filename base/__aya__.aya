.# This file is a part of aya: https://github.com/nick-paul/aya-lang

.# __aya__
.# Defines the __aya__ namespace and keywords

.# NOTE: 12 letter variables ending in the letter 'z' are reserved for use in
.#       standard library. Such variables are used below.



{, .# begin __aya__ namespace

[
  "__aya__"  .# This file
]:imported;

""2MZ "base" :9c + + :basedir;
""2MZ :homedir;

.#? S __aya__.alterprompt\n  change the prompt text
{1MZ}:alterprompt;

{,}:interpreter;

.# import name; import dir name
{importname__ importdirn__,

    .# True if the file is not imported
    __aya__.imported importname__ N\; :-1 =

    .# If condition is true
    { .# File not already imported, load it

        .# Add the name to the list
        importname__ __aya__.imported .B;

        { .# try
            .# Load the file
            importdirn__ importname__ + ".aya" + G ~
        } {e, .# catch
            .# Remove the file from imported list
            __aya__.imported importname__ N .- ;
            "Error importing '$(importname__)':\n\t$e" .D
        } .K

    }

    .# If condition is false
    { .# File already imported
      .# do nothing
    }
    .?

}:importfrmdir;


.# importbase uses the home dir instead of the
.# base dir
{
  __aya__.basedir __aya__.importfrmdir
}:importbase;


.# importfile uses the home dir instead of the
.# base dir
{
  __aya__.homedir __aya__.importfrmdir
}:importfile;

{importname__,
    .# Does the name contain a file sep? (:9c)
    .# :9c $ "\\"= {;"\\\\"} ? returns an escaped "\" -> "\\" if windows
    importname__ $ (:9c $ "\\"= {;"\\\\"} ?) | #{"/"|} .F =

    { .# No file sep, import from base
        importname__ __aya__.importbase
    }

    { .# input contains a file sep
        importname__ __aya__.importfile
    }

    .?
}:import;


{
    [] __aya__.:imported;
}:resetimports;

{,
    "M!" :__fact__
    "Ms" :__sin__
    "Mc" :__cos__
    "Mt" :__tan__
    "MS" :__asin__
    "MC" :__acos__
    "MT" :__atan__
    "ML" :__log__
    "Ml" :__ln__
    "Me" :__exp__
    "Md" :__float__
    "Mq" :__sqrt__
}:mathoverload

}:__aya__;





.#######################
.# DEFINE __aya__ KEYWORDS #
.#######################



.# ------
.# IMPORT
.# ------

.#? import library\n  import a __aya__ file\n  files are only imported once
{`(
    $ :T ::sym = {:C} ?
    .# Split whitespace separated names
    "\s+" | [""] :| #{__aya__.import};
)}:import;




.# ------
.# RELOAD
.# ------

.#? reload\n  reload imported files
{:workingdir__,
    ""2MZ            .# Save the current working dir
    ""3MZ            .# Reset the working dir
    __aya__.imported$\;  .# Copy currently imported files
    __aya__.resetimports .# Clear all imports
    "ayarc.aya" G ~  .# Load __aya__rc
    \ 3 MZ           .# Change the working dir back
    # {__aya__.import};  .# Reimport files
}:reload;




.# ----
.# LOAD
.# ----

.#? load S\n  Load a script
{`(".aya"+G~)}:load;



.# -----
.# USING
.# -----

.#? using dict\n  import variables from a dict into the current scope
{`W}:using;



.# ------
.# STRUCT
.# ------


{``({name::sym members::list,
    members $:~=!{"struct: all members must be unique in $members".D}?

    .# Metatable
    {,
        .# Constructor
        {: self,
            .# This object
            {,} :self;
            .# args will grab all args off the stack using list grabbing
            args~ members {self :D}.&;
            .# add the outer table as a metatable at runtime
            self name .Z :M
        } where {,
            members:members
            name:name
            "{[$(membersE)|]}"~:args
        }:__new__;

        .# string and print overloads
        .# default string:
        .# ( m1 m2 ... mN ) type!
        {self,
            "( "
            members :# {self \:I \;} " "* +
            " ) " +
            name :C +
            "!"+
        } with [
            ::name
            ::members
        ]:__str__:__repr__;

    } name {,}:DW
})}:struct;


.# ------
.# CLASS
.# ------

.#? class ::sym\n  declare a new class
{`({sym,
    {,
        sym:__type__;

        .# { meta : self,
        { : self meta, sym.Z :meta ;
            .# Create a new dict and set its metatable
            {,}:self meta :M;

            .# if it has a constructor, call it
            meta ::__init__ N \; {
                self.__init__
            } ?

            .# return the new object
            self
        } with [::sym] :__new__;
    }
    {,} :M .# add empty metatable
    sym {,}:DW .# assign variable
})}:class;


.# Variables for implementing class functions

.#? impl\n  implement instance functions\n  impl class_name::function_name {self, body}
{```(\@:D ;)}:impl;
.#? impl_static\n  static class function which get the class dict as the first argument\n  impl_static class_name::function_name {meta, body}
{```(\@.M:D ;)}:impl_static;
.#? static\n  static class function\n  static class_name::function_name {body}
{```( {f, {;f~} with [::f]}~ \@.M:D ;)}:static;

.{ class Example:

class ::point

.# Static class variable
0 point.:counter;

.# Cass constructor uses __init__ instead of __new__
.# and gets the object as the first argument
impl point::__init__ {x y self : meta,
    self .M :meta ;
    meta.counter 1 + meta.:counter ;
    x 10 * self.:x ;
    y 100 * self.:y ;
}

.# Instance functions get an instance of the class as the first arg

impl point::__str__ {self,
    "( $(self.x) $(self.y) ) point!"
}

.# Instance function alias
(point.__str__.`, 0); point.:__repr__;

impl point::sum {self,
    self.x self.y +
}

.# impl_static function gets metatable

impl_static point::num_points {meta,
    meta.counter
}

.# plain static gets nothing

static point::static_fn {
    "static" :P
}

.}

.# -------
.#   NIL
.# -------

{, } {,
    ::__nil:__type__;
    {"nil"}:__str__:__repr__;
    {; :T ::__nil =}:__eq__;
} :M :nil;


.###########
.# CONTROL #
.###########

.#? if (B) E E\n  if statement:\n  if (bool value) {\n    then\n  } {\n    else\n  }
{```.?}:if;


.#? B then E\n  evaluates E if B is true
{`?}:then;


.#? dowhile E E\n  evaluates E1 as long as E2 is true\n  always evaluates at least once
{``({condition__ loop__,
    {loop__ condition__} W
})}:dowhile;


.#? while E E\n  evaluates E1 as long as E2 is true
{``({condition__ loop__,
    condition__ {
        {loop__ condition__} W
    } ?
})}:while;

.#? A print\n  convert to string a print to console
{.P}:print;


.#? A println\n  convert to string and print to console on its own line
{:P}:println;


.#? getline\n  read input from stdin and return it as a string
{:R}:getline;


.#? SB conderr\n  throw error message if condition is true
{{.D} {;} .?}:conderr;

.#? BS assert\n throw error if bool is false
{\! {.D} {;} .?}:assert;

.#? B where D\n  use variables defined in D in B
.{ Example
    aya> {a, a b *} where {, 2:b } :double
    {a , a 2 * }
    aya> 3 double
    6

   Set constant values in loops.
   Before
    aya> 3R :# {{a, a b *} where {, 10:b "evaluating..":P} ~}
    evaluating..
    evaluating..
    evaluating..
    [ 10 20 30 ]
   After: (note the parenthesis)
    aya> 3R :# ({a, a b *} where {, 10:b "evaluating..":P})
    evaluating..
    [ 10 20 30 ]

   Escape functions with .` and ~ :
    aya> {a, a fn~} where {, double.` :fn} :apply_double
    {a , a {x , x 2 * } ~ }
    aya> 2 apply_double
    4

   Nesting!
    aya> {a, a fn~} where {, {a, a b *} where {, 2:b} :fn} :apply_double
    {a , a {a , a 2 * } ~ }
    aya> 2 apply_double
    4
.}
{`.+}:where;


.#? ::block with ::list\n  evaulate the variables (given by a list of symbols) in the block in the current scope
.{ Example:
    aya> 2:y
    2
    aya> {x, x y *} with [::y] :double
    {x , x 2 * }
    aya> 3 double
    6
.}
{`({:d__,
    .# Create a dictionary of all valies given by the list
    {,}:d__;
    :#{$~\d__:D;};
    .# Substitute the values from the dictionary into the block
    d__ .+
})}:with;


.################
.# import types #
.################

.#"C:/Users/Nick/git/aya-lang/base/" __aya__.:basedir;

import """
types
str
num
char
block
list
test
"""
