.# This file is a part of aya: https://github.com/nick-paul/aya-lang

.# __aya__
.# Defines the __aya__ namespace and keywords

.# NOTE: 12 letter variables ending in the letter 'z' are reserved for use in
.#       standard library. Such variables are used below.



{, .# begin __aya__ namespace

[
  "__aya__"  .# This file
]:imported;

""2MZ "base" :9c + + :basedir;
""2MZ :homedir;

.#? S __aya__.alterprompt\n  change the prompt text
{1MZ}:alterprompt;

{,}:interpreter;

.# import name; import dir name
{importname__ importdirn__,

    .# True if the file is not imported
    __aya__.imported importname__ N\; :-1 =

    .# If condition is true
    { .# File not already imported, load it

        .# Add the name to the list
        importname__ __aya__.imported .B;

        { .# try
            .# Load the file
            importdirn__ importname__ + ".aya" + G ~
        } {e, .# catch
            .# Remove the file from imported list
            __aya__.imported importname__ N .- ;
            "Error importing '$(importname__)':\n\t$e" .D
        } .K

    }

    .# If condition is false
    { .# File already imported
      .# do nothing
    }
    .?

}:importfrmdir;


.# importbase uses the home dir instead of the
.# base dir
{
  __aya__.basedir __aya__.importfrmdir
}:importbase;


.# importfile uses the home dir instead of the
.# base dir
{
  __aya__.homedir __aya__.importfrmdir
}:importfile;

{importname__,
    .# Does the name contain a file sep? (:9c)
    .# :9c $ "\\"= {;"\\\\"} ? returns an escaped "\" -> "\\" if windows
    importname__ $ (:9c $ "\\"= {;"\\\\"} ?) | #{"/"|} .F =

    { .# No file sep, import from base
        importname__ __aya__.importbase
    }

    { .# input contains a file sep
        importname__ __aya__.importfile
    }

    .?
}:import;


{
    [] __aya__.:imported;
}:resetimports;

{,
    "M!" :__fact__
    "Ms" :__sin__
    "Mc" :__cos__
    "Mt" :__tan__
    "MS" :__asin__
    "MC" :__acos__
    "MT" :__atan__
    "ML" :__log__
    "Ml" :__ln__
    "Me" :__exp__
    "Md" :__float__
    "Mq" :__sqrt__
}:mathoverload

}:__aya__;

1 nil.M.:__pushself__;





.#######################
.# DEFINE __aya__ KEYWORDS #
.#######################



.# ------
.# IMPORT
.# ------

.#? import library\n  import a __aya__ file\n  files are only imported once
{`(
    $ :T ::sym = {:C} ?
    .# Split whitespace separated names
    "\s+" | [""] :| #{__aya__.import};
)}:import;




.# ------
.# RELOAD
.# ------

.#? reload\n  reload imported files
{:workingdir__,
    ""2MZ            .# Save the current working dir
    ""3MZ            .# Reset the working dir
    __aya__.imported$\;  .# Copy currently imported files
    __aya__.resetimports .# Clear all imports
    "ayarc.aya" G ~  .# Load __aya__rc
    \ 3 MZ           .# Change the working dir back
    # {__aya__.import};  .# Reimport files
}:reload;




.# ----
.# LOAD
.# ----

.#? load S\n  Load a script
{`(".aya"+G~)}:load;



.# -----
.# USING
.# -----

.#? using dict\n  import variables from a dict into the current scope
{`W}:using;

.# -------
.# OPT_MOD
.# -------

.{
    Macro for creating a macro which runs a different block
    depending on whether or not a module is present as an argument

    .# Example:

    opt_mod (
        {block name mod,
            "with_mod!" :P [block.` name mod]
        }

        {block name,
            "no mod!":P [block.` name]
        }
    )

    aya> f {,} ::foo {"a"}
    with_mod!
    [ {"a"} ::foo {,} ]

    aya> f ::foo {"a"}
    no mod!
    [ {"a"} ::foo ]
.}

{with_mod no_mod,

    {:with_mod no_mod,

        .# Use constant substitution until var^ syntax is introduced
        _with_mod:with_mod;
        _no_mod:no_mod;

        .# Store functions on stack so they can be retrieved later
        {,
            no_mod.` :no_mod
            with_mod.` :with_mod
        }

        ```(
            .# Variable argument prefix operator
            .# aya> {mod name block, mod ::_fn =! {;} ? [mod name block.`]} :f

            .# Jump ahead 3 items
            .# aya> (```(\:&:T ::sym=! {\`}{\}.? f) ::_fn)   {,} ::foo {+}
            .# [ {,} ::foo {+} ]

            .# Jump ahead 2 items
            .# aya> (```(\:&:T ::sym=! {\`}{\}.? f) ::_fn)   ::foo {+}
            .# [ ::_fn ::foo {+} ]

            \:&:T ::sym=! {\`}{\}.?


            ( {mod name obj : is_module with_mod no_mod,

                .# True if this function is being defined in a module
                .# fn foo::bar {...}
                .# False if defined in outer scope
                .# fn ::bar {...}
                mod ::_opt_mod =! :is_module;

                .# If a module was provided, remove the ::_opt_mod symbol from the stack
                is_module {;} ?

                W .# Capture with_mod and no_mod from outer dict

                .# Quote obj in case it is a block
                is_module {
                    obj.` name mod with_mod
                } {
                    obj.` name no_mod
                }
                .?
            } )

        )
        ::_opt_mod
    }

    .# Use constant substitution until var^ syntax is introduced
    {, no_mod.`:_no_mod with_mod.`:_with_mod} .+

} __aya__.:opt_mod;

{`(__aya__.opt_mod)}:opt_mod;



.# ----
.#  FN
.# ----


.{
    `fn` macro
    Universal verbose syntax for defining functions

    Define a function in the current scope:

        aya> fn ::double {2*}
        aya> 3 double
        6

    Define a function in a module scope:

        aya> {,}:math;
        aya> fn math::sq {2^}
        aya> 5 math.sq
        25

    Define a function in a class/struct scope:

        aya> struct ::point [::x ::y]
        aya> fn point::sum {self, self.x self.y +}
        aya> 2 3 point! :p
        ( 2 3 ) point!
        aya> p.sum
        5

    Define a function in a submodule:

        aya> {, {,}:stats; }:math;
        aya> fn (math.stats)::mean {.E\S\/}
        aya> [1 2 3 4] math.stats.mean
        2.5
.}

opt_mod (
    {block name mod,
        block.` name mod :D ;
    }
    {block name,
        block.` name := ;
    }
) :fn:def;



.# ------
.# STRUCT
.# ------


{``({name::sym members::list,
    members $:~=!{"struct: all members must be unique in $members".D}?

    .# Metatable
    {,
        name:__type__;
        1 :__pushself__;

        .# Constructor
        {meta : self,
            .# This object
            {,} :self;
            .# args will grab all args off the stack using list grabbing
            num_members :A members {self :D}.&;
            .# add the outer table as a metatable at runtime
            self meta :M
        } {,
            members  :members
            membersE :num_members
        } .+ :__new__;

        .# string and print overloads
        .# default string:
        .# ( m1 m2 ... mN ) type!
        {self,
            "( "
            members :# {self \:I \;} " "* +
            " ) " +
            name :C +
            "!"+
        }.use[
            ::name
            ::members
        ]:__str__:__repr__;

        {,
            ::struct :__type__;
            "(struct $name $members)":__repr__;
            members :fields;
        }:__meta__;


    } name {,}:DW
})}:struct;


.# ------
.# CLASS
.# ------

.#? class ::sym\n  declare a new class
{`({sym,
    {,
        sym:__type__;
        1 :__pushself__;

        {meta : self,
            .# Create a new dict and set its metatable
            {,}:self meta :M;

            .# if it has a constructor, call it
            meta ::__init__ N \; {
                self.__init__
            } ?

            .# return the new object
            self
        } :__new__;

        {self,
            "($(self.__type__ :C) 0x$(self M# 10 16 H))"
        }:__repr__:__str__;

        {,
            ::class :__type__;
            "(class $sym)":__repr__;
        }:__meta__;
    }
    sym := ; .# assign variable
})}:class;



.{ class Example:

class ::point

.# Static class variable
0 point.:counter;

.# Cass constructor uses __init__ instead of __new__
.# and gets the object as the first argument
def point::__init__ {x y self : meta,
    self .M :meta ;
    meta.counter 1 + meta.:counter ;
    x 10 * self.:x ;
    y 100 * self.:y ;
}

.# Instance functions get an instance of the class as the first arg

def point::__str__ {self,
    "( $(self.x) $(self.y) ) point!"
}

.# Instance function alias
(point.__str__.`, 0); point.:__repr__;

def point::__repr__ ( point.__str__.`)

def point::sum {self,
    self.x self.y +
}

.# impl_static function gets metatable

impl_static point::num_points {meta,
    meta.counter
}

.# plain static gets nothing

static point::static_fn {
    "static" :P
}

.}

.# ------
.# MODULE
.# ------

.#? module ::sym\n  declare a new module
{`({name,
    {,
        name :__modname__;

        {meta : name^,
            "Cannot create new instance of module $name" .D
        } :__new__;

        {,
            ::module :__type__;
            "(modue $name)":__repr__;
        }:__meta__;
    }
    name := ; .# assign variable
})}:module;



.###########
.# CONTROL #
.###########


.#? if (B) E E\n  if statement:\n  if (bool value) {\n    then\n  } {\n    else\n  }
{```.?}:if;


.#? B then E\n  evaluates E if B is true
{`?}:then;


.#? dowhile E E\n  evaluates E1 as long as E2 is true\n  always evaluates at least once
{``({condition__ loop__,
    {loop__ condition__} W
})}:dowhile;


.#? while E E\n  evaluates E1 as long as E2 is true
{``({condition__ loop__,
    condition__ {
        {loop__ condition__} W
    } ?
})}:while;

.#? A print\n  convert to string a print to console
{.P}:print;


.#? A println\n  convert to string and print to console on its own line
{:P}:println;


.#? getline\n  read input from stdin and return it as a string
{:R}:getline;


.#? SB conderr\n  throw error message if condition is true
{{.D} {;} .?}:conderr;

.#? BS assert\n throw error if bool is false
{\! {.D} {;} .?}:assert;


.{ Example:
    aya> with {"foo" file.dummyfile!} ::f {"File name is $(f.name)" :P}
    opened dummy file 'foo'
    File name is foo
    closed dummy file 'foo'
    aya> with {"foo" file.dummyfile!} ::f {"File name is $(f.name)" :P "Some error!".D }
    opened dummy file 'foo'
    File name is foo
    closed dummy file 'foo'
    Some error!
    stack:

    just before:
            {::f .Z .close} ~
.}
{```(__aya__.with_ ~)}:with;


.# Helper function for `with` keyword which generates wrapper code
.{
    with {"foo.txt" file!} ::f {
      f.lines #:P
    }
.}
{init::block var::sym code::block: try catch close,
    {init~ var := ; code~}.use[::init ::code ::var] :try ;
    {var.Z .close .D}.use[::var] :catch ;
    {var.Z .close}.use[::var] :close ;
    {try catch .K close~}.use[::try ::catch ::close]
    .setlocals[var]
}__aya__.:with_;


.################
.# import types #
.################

.#"C:/Users/Nick/git/aya-lang/base/" __aya__.:basedir;

import """
types
str
num
char
block
list
test
"""
