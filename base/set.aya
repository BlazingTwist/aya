.# This file is a part of Aya: https://github.com/nick-paul/aya-lang

.# set.aya
.# Defines the set data structure

.{? type: set
    The set type is a simple list type where there exits no duplicate elements.
    Create a set by entering a list followed by the set constructor
.}



{,

    ::set :__type__;

    {l::list meta, {,l :~ :list} meta :M}:__new__;



    .##############################
    .# ADDING / REMOVING ELEMENTS #
    .##############################

    .#? A ::set set.add\n  add an item to a set\n  overloaded operator: +
    {item self,
        item self.in ! {self.list [item] K;} ? self
    }:__add__;

    .#? A ::set set.rem\n  remove an item from a set\n  overloaded operator: -
    {item self,
        self.list [item] :| self.:list
    }:__sub__;



    .##################
    .# SET OPERATIONS #
    .##################

    .#? ::set ::set set.or\n  set union
    {sa::set sb::set,
        sa.list $ \; sb.list K :~ set!
    }:__or__;

    .#? ::set ::set set.and\n  set intersection
    {sa::set sb::set : l,
        sb.list :l;
        sa.list # {l \N$ 0:> {I} {;;} .?} set!
    }:__and__;

    .#? ::set ::set set.div\n  set difference
    {sa::set sb::set,
        sa.list $\; sb.list :| set!
    }:__div__;

    .#? ::set ::set set.eq\n test if two sets are the same
    {sa::set sb::set,
        sa.list sb.list =
    }:__eq__;

    .#? ::set ::set set.lt/gt\n proper subset
    {sa::set sb::set : l,
        sa sb.__leq__            .# subset
        sa.list sb.list = !  .# proper subset
        &
    }:__lt__;
    {\.__lt__}:__gt__;

    .#? ::set ::set set.leq\n subset
    {sa::set sb::set : l,
        sa.list :l;
        sb.list # { l \ N \; 0 :>} {*}F
    }:__leq__;

    {\.__leq__}:__geq__;



    .###################
    .# OTHER FUNCTIONS #
    .###################

    .#? A ::set set.in\n  tests if an item is in a set
    {item self, self.list item N\; :1 =!}:in;

    .#? ::set set.len\n  returns the number of elements in the set
    {.listE}:__len__;

    .#? ::set set.clear\n  clear the contents of a set
    {[]\ .:list}:clear;

    {.listP"s"\+}:__str__:__repr__;

    {blk self,
        self.list :# {blk}
    }:__each__;

}:set;

{`(set!)}:s;


.#########
.# TESTS #
.#########

import ::test

`~ {:ts,

    "set" testset! :ts;

    {s[1 2 3]} [[1 2 3] set!] ts+
    {3 s[1 2 3] -} [s[1 2]] ts+
    {4 s[1 2 3] -} [s[1 2 3]] ts+
    {4 s[1 2 3] +} [s[1 2 3 4]] ts+
    {3 s[1 2 3] +} [s[1 2 3]] ts+
    {s[1 2 3] s[2 3 4] |} [s[1 2 3 4]] ts+
    {s[1 2 3] s[2 3 4] &} [s[2 3]] ts+
    {s[1 2 3] s[1 4] /} [s[2 3]] ts+
    {s[1 2 3] s[1 2 3] =} [1] ts+
    {s[1 2 3] s[2 3] <} [1] ts+
    {s[1 2 3] s[1 2 3] <} [0] ts+
    {s[1 2 3] s[1 2 3] :<} [1] ts+
    {s[2 3] s[1 2 3] >} [1] ts+
    {s[1 2 3] s[1 2 3] >} [0] ts+
    {s[1 2 3] s[1 2 3] :>} [1] ts+
    {2 s[1 2 3].in} [1] ts+
    {0 s[1 2 3].in} [0] ts+
    {s[1 2 3] E} [3] ts+
    {s[1 2 3].clear} [s[]] ts+


    ts __aya__.addtest
}
