.# Functions for iterators

{,
  {f collection : it,
    collection collection Mo.iter! :it;
    it.start
    {
      it.next f
      it.done!
    } W
  }:each;

  {f collection : it total,
    collection collection Mo.iter! :it;
    it.start
    it.next :total;
    {
      it.next total f :total;
      it.done!
    } W
    total
  }:reduce;

  {begin f collection : it total,
    collection collection Mo.iter! :it;
    it.start
    begin :total;
    {
      it.next total f :total;
      it.done!
    } W
    total
  }:reducewith;

}:iterator;



{,
  {l::list,
    {, 0:state l:l } listiter MO
  }:new;

  {self,
    0 self.:state;
  }:start;

  {self,
    self.l.[self.state]
    self.state B self.:state;
  }:next;

  {self,
    self.state self.l E :>
  }:done;

}:listiter;

{,
  {d::dict,
    {, 0:state d:K:keys d:d} dictiter MO
  }:new;

  {self,
    0 self.:state;
  }:start;

  {self : key,
    self.keys.[self.state] :key;
    [key self.d.[key]]
    self.state B self.:state;
  }:next;

  {self,
    self.state self.keys E :>
  }:done;

}:dictiter;
