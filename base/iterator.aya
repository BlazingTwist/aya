.# Functions for iterators

{,

    {collection,
        collection collection.iter!
    }:new;

}:iterator;


{f collection : it,
    collection iterator! :it;
    it.start
    {
        it.next f
        it.done!
    } W
}:each;

{f collection : it total,
    collection iterator! :it;
    it.start
    it.next :total;
    {
        it.next total f :total;
        it.done!
    } W
    total
}:reduce;

{begin f collection : it total,
    collection iterator! :it;
    it.start
    begin :total;
    {
        it.next total f :total;
        it.done!
    } W
    total
}:reducewith;

{collection : it list,
    collection iterator! :it;
    it.start
    [it.next] :\ :list;
    {
        it.next list .B :list;
        it.done!
    } W
    list
}:collect;


{,
    ::iter:__type__;

    {l::list,
        {, 0:state l:l } listiter MO
    }:__new__;

    {self,
        0 self.:state;
    }:start;

    {self,
        self.l.[self.state]
        self.state B self.:state;
    }:next;

    {self,
        self.state self.l E :>
    }:done;

}:listiter;

{,
    ::iter:__type__;

    {d::dict,
        {, 0:state d:K:keys d:d} dictiter MO
    }:__new__;

    {self,
        0 self.:state;
    }:start;

    {self : key,
        self.keys.[self.state] :key;
        [key self.d.[key]]
        self.state B self.:state;
    }:next;

    {self,
        self.state self.keys E :>
    }:done;

}:dictiter;
