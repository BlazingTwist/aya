{,
    .#? LLE zw\n  zip two lists with a block
    {.&}:zip;

    .#? ::list ::list ::block.pu\n  (permusing) permutes elements of two lists and applies an expression to each
    .# aya> "AB" "ab" {P+}.pu
    .#      [ [ "aA" "bA" ] [ "aB" "bB" ] ]
    .# aya> [1 2 3][1 2 3] {*} .pu
    .#      [ [ 1 2 3 ] [ 2 4 6 ] [ 3 6 9 ] ]
    {la lb ex, [la lb laEL,\#{ex}]}:pu;

    .#? ::list ::block.tw\n  (takewhile) take from list while the condition is satisfied
    .# aya> 10R {5<}.tw
    .#      [ 1 2 3 4 ]
    {e,{e!}.N $0= {;;[]} {|;} .? }:tw;

    .#? ::any ::list ::block.el\n  apply block to `any` and `i` for each element across list
    .# aya> "a" ["A" "B" "C"] {+}.el
    .#      ["aA" "aB" "aC"]
    {@@.E@\L\@.&}:el;

    .#? ::list ::any ::block.le\n  apply block to `any` and `i` for each element across list
    .# aya> ["A" "B" "C"] "a" {+}.le
    .#      ["Aa" "Ba" "Ca"]
    {@@\.E@\L@.&}:le;


    .#? ::block.haslocals\n  return true if the block has a local variables
    {.M::localsN\;}:haslocals;

    .#? ::block.makelocals\n  if a block has local variables, return the block, otherwise wrap it in a block that has an empty local variable set
    .# aya> {:a, a 1 +}.makelocals
    .# {: a , a 1 + }
    .# aya> {a, a 1 +}.makelocals
    .# {a , a 1 + }
    .# aya> {a 1 +}.makelocals
    .# {, {a 1 +} ~ }
    {f,
        f.`.haslocals {
            .# f has locals, simply return the block
            f.`
        } {
            .# f does not have locals, wrap it in a block that does
            {: , f~} {, f.`:f} .+
        } .?
    }:makelocals;


    .#? ::list ::block.setlocals\n  wrap a block in a scope which has locals provided by the list of symbols
    .# aya> [::x] {:x; "x is $x"}.setlocals :setx
    .# {: x , {:x ; "$xx is "} ~ }
    .# aya> 4 setx
    .# "x is 4"
    .# aya> x
    .# ERROR: Variable x not found
    {`({code syms::list,
        syms #:C " " *      .# [::x ::y ::z] -> "x y z"
        "{:" \ ",__~}"++~     .# {x y z, __~}
        {, code.`:__} .+    .# {x y z, {...}~ }
    })}:setlocals;


    .#? ::block .use ::list\n  evaulate the variables (given by a list of symbols) in the block in the current scope
    .{ Example:
        aya> 2:y
        2
        aya> {x, x y *}.use[::y] :double
        {x , x 2 * }
        aya> 3 double
        6
    .}
    {`({:d__,
        .# Create a dictionary of all values given by the list
        {,}:d__;
        :#{$~\d__:D;};
        .# Substitute the values from the dictionary into the block
        d__ .+
    })}:use;

    .#? ::block .capture ::list\n  capture all vars defined in list as local variables in the block.\n  If the block has no local variables, wrap it in a block that does and return that block
    .{ Example:
        aya> 1:a
        1
        aya> {x, a x +}.capture[::a]
        {x : a , a x + }
        aya> 5 f
        6
        aya> 2:a
        2
        aya> 5 f
        6
    .}
    {`({\.makelocals :& .M.locals @ .capture_vars dict_update ;})}:capture;

    .#? ::block .time\n  return the execution time of a block in ms
    .# {M$ \[1|~]; M$ /}:time;
    {:a, M$:a; ~ M$ a -} :time;

    .#? ::block.where_const ::dict\n  use variables defined in D in B
    .{ Example
        aya> {a, a b *}.where_const {, 2:b } :double
        {a , a 2 * }
        aya> 3 double
        6

       Set constant values in loops.
       Before
        aya> 3R :# {{a, a b *}.where_const {, 10:b "evaluating..":P} ~}
        evaluating..
        evaluating..
        evaluating..
        [ 10 20 30 ]
       After: (note the parenthesis)
        aya> 3R :# ({a, a b *}.where_const {, 10:b "evaluating..":P})
        evaluating..
        [ 10 20 30 ]

       Escape functions with .` and ~ :
        aya> {a, a fn~}.where_const {, double.` :fn} :apply_double
        {a , a {x , x 2 * } ~ }
        aya> 2 apply_double
        4

       Nesting!
        aya> {a, a fn~}.where_const {, {a, a b *}.where_const {, 2:b} :fn} :apply_double
        {a , a {a , a 2 * } ~ }
        aya> 2 apply_double
        4
    .}
    {`.+}:where_const;

    {`(\.makelocals:&.M.locals@.+;)}:where;


}:block;

{.le}:otimes;
{.el}:odot;
