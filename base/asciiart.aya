.{
    asciiart

    A small toy library for drawing ascii art

    asciiart makes heavy use of operator overloading to allow programs
    to be as short and concise as possible.

    Examples:

      - A simple train:

        aya> " 6_`|6 |` ()--()"_ 3L"  ~"_T*
        asciiart:
         ______   ______   ______
        |      | |      | |      |
         ()--() ~ ()--() ~ ()--()


      - Order N Serpinski triangle:

        aya> 3 "##`#"_\L{I}F
        asciiart:
        ########
        # # # #
        ##  ##
        #   #
        ####
        # #
        ##
        #

https://codegolf.stackexchange.com/questions/101684/all-aboard-the-ascii-train
"hello"
({
.E"3 3_`  | # |`  |3_|`_|5\"|"_ "\"`-0-0-'"/\L\{'#\JI}.&S"4 o O O`3 o`  TS__[O]` {6=|" _"./o--000'"/\+
})
.}

class ::asciiart

impl asciiart::__init__ {str self,
    str :T ::str = {
        [str] self.:list ;
    } {
        .# list
        .# Make sure all are at least as long as the longest
        str :&#E .max #.< :str ;
        str self.:list ;
    } .?
}

impl asciiart::__eq__ {self c::char,
    self.list :# { :# {; c}} self.M!
}

impl asciiart::__str__ {self,
    self.list "\n" *
}

impl asciiart::__repr__ {self,
    "asciiart:\n$(self.__str__)\n"
}


impl asciiart::__negate__ {self,
    self.list.T self.M!
}


.{  Transpose
    Example:

    aya> "3#`.##`..#"_ $ T
    asciiart:
    ###
    .##
    ..#
     asciiart:
    #..
    ##.
    ###
.}
impl asciiart::__negate__ {self,
    self.list.T self.M!
}


.{ Example:

    aya> "3#`3.`#.."_ $ +
    asciiart:
    ######
    ......
    #..#..

    aya> "3#`3.`#.."_ '~ +
    asciiart:
    ###~
    ...~
    #..~

    aya> "3#`3.`#.."_ ")>" +
    asciiart:
    ###)>
    ...)>
    #..)>

    aya> ["3#`3.`#.."_ $ '~\] S
    asciiart:
    ###~###
    ...~...
    #..~#..
.}
impl asciiart::__add__ {other self,
    other :T ::char = other :T ::str = | {
        self.list #{other \+} self.M!
    } {
        other.list .T self.list.T K .T self.M!
    } .?
}


impl asciiart::__radd__ {self other,
    self.list #{other +} self.M!
}


impl asciiart::w {self,
    self.list.T E
}

impl asciiart::h {self,
    self.list E
}

.{ Horizontal stack
   Example:
    aya> "3#`3.`#.."_ $ /
    asciiart:
    ###
    ...
    #..
    ###
    ...
    #..
.}
impl asciiart::__div__ {other self,
    other.list $\; self.list $\; K self.M!
}

impl asciiart::__rdiv__ {self other,
    self other self.M! /
}


.{ Reverse along vertical axis
   Example:
    aya> "3#`3.`#.."_ $ U
    asciiart:
    ###
    ...
    #..
     asciiart:
    ###
    ...
    ..#
.}
impl asciiart::__reverse__ {self$,
    self.list :#{U};
    self
}

impl asciiart::__dec__ {self$,
    self.list U ;
    self
}

impl asciiart::__mul__ {list self,
    list :#{self} B; S
}

impl asciiart::__rpow__ {self num,
    self {self +} numV %
}

.{ Example:
    aya>  "aba`bad" _ '# I
    ::char
    asciiart:
    ###
    ###

    aya>  "aba`bad" _ "a#" I
    ::str
    asciiart:
    #b#
    b#d

    aya> "# ` #"_ "abc`def"_ I
    asciiart:
    abc
    def
       abc
       def
.}
impl asciiart::__getindex__ {index self,
    index :T {?=,
        ::str {
            index self.replace
        },
        ::char {
            index self.fill
        },
        ::asciiart {
            index self.replace_aa
        },
        { "asciiart::__getindex__ invalid index type" .D}
    }
}

.{ Example:
    aya> '@ "abc`def" _ .fill
    asciiart:
    @@@
    @@@

    aya> "#" "abc`def" _ .fill
    asciiart:
    ###
    ###
.}

impl asciiart::fill {c self,
    c :T ::str = {c.[0] :c;} ?
    self.list :# { :# {; c}} self.M!
}


.{ Example:
    aya> "#-" "###`# ` # "_ .replace
    asciiart:
    ---
    -
     -

    aya> "###`***" "###`# ` # "_ .replace
    asciiart:
    ***
    #
     #
.}
impl asciiart::replace {s::str self,
    s "`" | .E1={~}? :s ;
    s V:from ; V:to ; ;
    self.list :# {from to @ .&}
    self.M!
}

.{ Example:
    aya> "3#`# #`3#"_
    asciiart:
    ###
    # #
    ###

    aya> "3#`# #`3#"_ $.replace_aa
    asciiart:
    #########
    # ## ## #
    #########
    ###   ###
    # #   # #
    ###   ###
    #########
    # ## ## #
    #########
.}
impl asciiart::replace_aa {a::asciiart self : l,
    a $ ' I \ J :l;    .# List of aa and empty version of aa
    self.list ' #.= #! .# Mask of filled/empty
    :#{
        :#{ l \ I }    .# Use the mask to index into the list
        S              .# Concat each aa in the row
    } {/}F             .# Concat each row
}

impl asciiart::rle {s,
    s $ "\\d+"| \ "\\d+" &  .# Split into lists of string sections and runs
                            .# Ex: "3a 4b" => ["" "a " "b"] ["3" "4"]
    .E 0 = {;;s}            .# If no rle to do, just return the string
    {                       .# There is rle to do, do this block
        #.!                 .# convert strings to nums => [3 4]
        \V@@                .# Remove the leading string and rearrange
        {
            V               .# pop the charachter to repeat
            @L              .# repeat the character
            \+              .# join with original string
        }
        .&                  .# Apply the above block to each pair in the list
        S+                  .# Combine everything
    }
    .?
}





[ "00000" "0   0" "00000" ] asciiart!T :o;
[ "EEEEE" "E E E" "E   E" ] asciiart!T :e;
[ "T    " "TTTTT" "T    " ] asciiart!T :t;
[ "GGGGG" "G G G" "G GGG" ] asciiart!T :g;

asciiart:aa;

{asciiart.rle "`"| asciiart!}:_;

.{ Example:
    Generate a Sierpinski carpet:
    "3#`# #`3#"_$I$I
    .. or triangle
    "##` #"_ $I$I

    ".:.` ."_$I$I

    "##`#"_$I $U\+ $V\/ $I
.}
