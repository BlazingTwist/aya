.# This file is a part of Aya: https://github.com/nick-paul/aya-lang

.# test.aya
.# Defines an interface for testing aya code

.# Test object
{,
    ::test :__type__;

    .# Create a new test
    .#   blk:      the stack to be evauated
    .#   expected: the state of the stack after evaluation
    .#             ex: {1 2 + 3 [4]} => [3 3 [4]]
    {blk::block expected::list,
        {, "blk".Z:blk expected:expected } test MO
    }:__new__;

    .# Run the test. If passed, return "", else return error message
    {self : res blk expected,
        self.W

        {[blk $\;] :res;} {e,
        "Exception in test $blk:\n\t$e" .D
    } .K


    res expected = ! {
        ["Test failed: $blk\n"
         "\tExpected: $expected\n"
         "\tRecieved: $res" ]S
    } { "" } .?

    }:run;
}:test;



{,
    ::testset :__type__;

    .# Create a new test set
    {name::str,
        {, name:name []:tests} testset MO
    }:__new__;

    .# Add a new test to the test set
    {blk::block expected::list self,
        "blk".Z expected test!
        self.tests
        K ;
    }:__add__;

    .# Evaluate all tests, if any failed, report
    {self,
        self.tests #{.run} [""] :|
        .E 0 = {
            ; "testset '$(self.name)': All tests passed!" :P
        } {
            "testset '$(self.name)': Tests failed!\n" :P
            #{:P}
        } .?
    }:run;
}:testset;



.# Add functions to the aya namespace

[] __aya__.:tests

{ts::testset,
    __aya__.tests ts K ;
} __aya__.:addtest;

{
    __aya__.tests # {ts,
        ts.run
    };
} __aya__.:doruntests;


.{
Visualize a decoded long:
32 2 {l n, l .bits n5* .> [n 5] L :#{$ 2 10 H $'a+ [3|] :P}; }:b~
172066848 6 b
.}
