.# This file is a part of Aya: https://github.com/nick-paul/aya-lang

.# queue.aya
.# Defines the queue data structure

.{? type: queue
    A simple queue data structure

    Create queues by entering a list followed by the queue constructor
    [1 2 3] queue!
.}


class ::queue


.#? ::list ::queue.__init__\n  convert a list into a queue
def queue::__init__ {l self,
    l self.:list ;
}


.# str and repr overloads
def queue::__str__ {self,
    self.isempty {
        "queue: <- -<"
    } {
        "queue: <-" self.list P B; V; "-<" ++
    } .?
}

(queue.__str__.`,0); queue.:__repr__;


.#? ::queue.next\n  return the next item in the queue
def queue::next {self,
    "queue obj is empty" self.list E 0 = conderr
    self.list V \ ;
}


.#? ::queue.peek\n  return the next item in the queue without removing it from the queue
def queue::peek {self,
    "queue obj is empty" self.list E 0 = conderr
    self.list 0 I
}

.#? ::queue.__len__\n  return the number of elements in the queue
def queue::__len__ { .list E }


.#? ::queue.isempty\n  tests if the queue is empty
def queue::isempty { .list E 0 = }


.#? ::any ::queue.add\n  add an item to the queue
def queue::__add__ {self,
    self.list.B ; self
}


.#? ::queue.clear\n  clear the queue
def queue::clear {self,
    [] self.:list
}

def queue::__each__ {blk self,
    self.list :# {blk}
}



.#########
.# TESTS #
.#########

import ::test

`~ {:ts,

    "queue" testset! :ts;

    {[1 2 3] queue! :T} [::queue] ts+
    {[1 2 3] queue! .next} [1] ts+
    {:q, [1 2] queue!:q .next; q.next} [2] ts+
    {:q, [1 2] queue!:q .peek; q.next} [1] ts+
    {[1 2] queue! .clear .list} [[]] ts+
    {3 [1 2] queue! + .next} [1] ts+
    {[1 2 3] queue! E} [3] ts+
    {:q, [1] queue!:q .next; q.isempty} [1] ts+
    {[1] queue! .isempty} [0] ts+
    {[] queue! .isempty} [1] ts+


    ts __aya__.addtest
}
