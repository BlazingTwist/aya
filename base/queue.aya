.# This file is a part of Aya: https://github.com/nick-paul/aya-lang

.# queue.aya
.# Defines the queue data structure

.{? type: queue
    A simple queue data structure

    Create queues by entering a list followed by the queue constructor
    [1 2 3] queue!
.}




{,
    ::queue :__type__;


    .#? L queue.new\n  convert a list into a queue
    {l meta, {,l:list} meta MO}:__new__;

    .# str and repr overloads
    {self,
        self.isempty
        {
            "queue: <- -<"
        } {
            "queue: <-"self.listPB;V;"-<"++
        } .?
    }:__repr__:__str__;

    .#? ::queue queue.next\n  return the next item in the queue
    {self,
        "queue obj is empty" self.listE0= conderr
        self.listV\;
    }:next;

    .#? ::queue queue.peek\n  return the next item in the queue without removing it from the queue
    {self,
        "queue obj is empty" self.listE0= conderr
        self.list0I
    }:peek;

    .#? ::queue queue.len\n  return the number of elements in the queue
    {.listE}:__len__;

    .#? (queue) queue.isempty\n  tests if the queue is empty
    {.listE0=}:isempty;

    .#? A ::queue queue.add\n  add an item to the queue
    {self, self.list.B; self}:__add__;

    .#? ::queue queue.clear\n  clear the queue
    {self, [] self.:list}:clear;

    {blk self,
        self.list :# {blk}
    }:__each__;

}:queue;



.#########
.# TESTS #
.#########

import ::test

`~ {:ts,

    "queue" testset! :ts;

    {[1 2 3] queue! :T} [::queue] ts+
    {[1 2 3] queue! .next} [1] ts+
    {:q, [1 2] queue!:q .next; q.next} [2] ts+
    {:q, [1 2] queue!:q .peek; q.next} [1] ts+
    {[1 2] queue! .clear .list} [[]] ts+
    {3 [1 2] queue! + .next} [1] ts+
    {[1 2 3] queue! E} [3] ts+
    {:q, [1] queue!:q .next; q.isempty} [1] ts+
    {[1] queue! .isempty} [0] ts+
    {[] queue! .isempty} [1] ts+


    ts __aya__.addtest
}
