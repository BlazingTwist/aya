.# This file is a part of Aya: https://github.com/nick-paul/aya-lang

.# bitset.aya
.# Defines bitset type

class ::bitset

impl bitset::__new__ {s meta,
    s :T ::num = {
        {, s:size 0sL:bits } meta MO
    } {
        s meta.fromlist
    } .?
}

impl_static bitset::fromlist {l::list meta,
    {, lE:size l:bits } meta MO
}


impl bitset::__str__ {
    .bits P "bitset!" +
}

(bitset.__str__.`,0); bitset.:__repr__;




.#? index ::bitset.set\n  set the bits given by the index to true
.{ Example:
    aya> 4 bitset! :b
    [ 0 0 0 0 ]
    aya> 1 b.set
    aya> b
    [ 0 1 0 0 ]
    aya> [0 3] b.set
    aya> b
    [ 1 1 0 1 ]
.}
impl bitset::set {n self,
    1 self.bits.:[n]
}


.#? index ::bitset.set\n  set the bits given by the index to false
.{ Example:
    aya> [1 0 1 0] bitset! :b
    [ 1 0 1 0 ]bitset!
    aya> 0 b.reset
    aya> b
    [ 0 0 1 0 ]bitset!
.}
impl bitset::reset {n self,
    0 self.bits.:[n]
}

.#? ::bitset.__getindex__\n  get value of bit at the given index
.{ Example:
    aya> [1 0 1 0] bitset! :b
    [ 1 0 1 0 ]bitset!
    aya> b.[0]
    1
    aya> b.[0 2]
    [ 1 1 ]
.}
impl bitset::__getindex__ {n self,
    self.bits.[n]
}


.#? ::bitset.count\n  return the number of true bits in the set
.{ Example:
    aya> [0 1 0 1] bitset! .count
    2
    aya> [1 1 1 1] bitset! .count
    4
.}
impl bitset::count {
    .bits S
}

.#? ::bitset.__signum__\n  not each bit
.{ Example:
    aya> [1 0 1 0] bitset! .!
    [ 0 1 0 1 ]bitset!
.}
impl bitset::__signum__ {self,
    self.bits #! self Mo.fromlist
}


.#? ::bitset ::bitset.__or__\n  or two bitsets
.{ Example:
    aya> [0 0 0 1] bitset! [1 1 0 0] bitset! |
    [ 1 1 0 1 ]bitset!
.}
impl bitset::__or__ {other self,
    other.bits self.bits {|}.&
    self Mo.fromlist
}


.#? ::bitset ::bitset.__and__\n  and two bits
.{ Example:
    aya> [1 0 0 1] bitset! [1 1 0 0] bitset! &
    [ 1 0 0 0 ]bitset!
.}
impl bitset::__and__ {other self,
    other.bits self.bits {&}.&
    self Mo.fromlist
}


.#? ::bitset.__len__\n  the size of the bitset
.{ Example:
    aya> [1 1 0 0] bitset! E
    4
    aya> [1 1 0 0 1 1 0 0] bitset! E
    8
.}
impl bitset::__len__ {
    .bits E
}
