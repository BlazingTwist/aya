.# This is a demonstration of how macro-like functions can be written
.# The following function takes a block as an argument and vectorizes
.# it. Of course, the same thing can be achieved with the map (#) operator

{f,
    .# A function which applies __x to each element in a list using :#
    {:fn,
        __x:fn; :#{fn}
    }
    .# Substitute __x with the input function 'f'
    where
    {,
        f.`:__x
    }
}:vectorize;

.{
This function only works on non-lists since the B operator is defined differently for lists
aya> {a, a B} :inc
{a , a B }

:: num B -> increment
aya> 2 inc
3

::list B -> pop
aya> [1 2 3] inc
[ 1 2 ] 3

Apply the vectorize function
aya> inc .` vectorize :vinc
{: fn , {a , a B } :fn ; {fn} :# }
aya> [1 2 3] vinc
[ 2 3 4 ]

Of course the same can be achieved with the # operator:
aya> [1 2 3] #inc
[ 2 3 4 ]
.}


