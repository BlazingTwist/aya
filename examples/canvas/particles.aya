import ::canvas

.# Close the open canvas if there is one
{c.close} {;} .K


.# Vector used for physics calculations
struct ::vector [
    ::x
    ::y
]

def vector::__add__{other self,
    other.x self.x +
    other.y self.y +
    self.M!
}

def vector::__rmul__{self n,
    self.x n *
    self.y n *
    self.M!
}


struct ::particle [
    ::pos   .# vector
    ::vel   .# vector
    ::acc   .# vector
    ::life  .# num (0-255)
]


.# Create a particle from a vector
.# Use the input vector as the position
def ::from_vec {pos : p,
    0 0 vector! $ $ 255 particle! :p;
    pos p.reset
    p
}

.# Apply physics simulation to the particle
.# Use a time step of 3
2.5 :time_step;
def particle::update {self,
    self.vel self.acc time_step * + self.:vel;
    self.pos self.vel time_step * + self.:pos;
    self.life 4 - self.:life;
}


.# Draw the particle on the canvas
def particle::draw {self,
    self.life 255/ c.set_alpha
    self.pos.x self.pos.y 4 c.fillcircle
}

.# Set the particle to the given location and
.# randomize the velocity
def particle::reset {pos self,
    pos self.:pos;
    .Q2*1- .Q2*2- vector! self.:vel;
    0 0.05 vector! self.:acc;
    255 self.:life;
}

.# Return true if the particle is dead
def particle::dead {self,
    self.life 0 :<
}


.# Create a new canvas
{, "Particles":name 0:autoflush } canvas! :c;
.# The spawn location of the particles
200 100 vector! :origin;
.# Array of particles
[500,; origin from_vec]:particles;
.# Initialize all lifetimes
particles :# {255Q \.:life};

.# Simulation loop
{
    .# Update particles
    particles :# {p,
        p.update
        p.dead {origin p.reset} ?
    } ;

    c.clear
    particles :# { .draw };

    c.show
    10:Z
    c.isopen
} W
