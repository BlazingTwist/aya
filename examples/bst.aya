.# Binary Search Tree Implementation
.# @nick-paul

class ::bst


def bst::__init__ {data self,
    data  self.:data;
    ::nil self.:left;
    ::nil self.:right;
}


def bst::_print {node depth : bst^,
bp
    " |" depth 1 + L S .P
    node :T ::bst = {
        node.right depth 1+ bst._print
        node.left  depth 1+ bst._print
    } { "-":P } .?
}

def bst::_insert {data node parent::bst side::sym : bst^,
    node :T ::bst = {
        data node.data > {
            data node.right node ::right bst._insert
        } {
            data node.data < {
                data node.left node ::left bst._insert
            } ?
        } .?
    } {
        data bst! parent.:[side];
    } .?
}

def bst::__repr__ {self : bst^,
    self 0 bst._print
    ""
}

def bst::insert {data self : bst^,
    data self.data > {
        data self.right self ::right bst._insert
    } {
        data self.left  self ::left  bst._insert
    } .?
}

50 bst! :b;
.# {100Q b.insert} 10 %

b
