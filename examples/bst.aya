.# Binary Search Tree Implementation
.# @nick-paul

{,

    ::bst:__type__;

    {data,
        {, data:data ::nil:left ::nil:right } bst MO
    }:__new__;

    {a b,

    }:__eq__;

    {node depth,
        " |" depth L S .P
        node :T ::bst = {
            node.data :P

            node.right depth 1+ bst._print
            node.left  depth 1+ bst._print
        } { "-":P } .?
    }:_print;

    {data node parent::bst side::sym,
        node :T ::bst = {
            data node.data > {
                data node.right node ::right bst._insert
            } {
                data node.data < {
                    data node.left node ::left bst._insert
                } ?
            } .?
        } {
            data bst! parent.:[side];
        } .?
    }:_insert;

    {self,
        self 0 bst._print
        ""
    }:__repr__;

    {data self,
        data self.data > {
            data self.right self ::right bst._insert
        } {
            data self.left  self ::left  bst._insert
        } .?
    }:insert;

}:bst;

.# 50 bst! :b;
.# {100Q b.insert} 10 %
