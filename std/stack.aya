.# This file is a part of Aya: https://github.com/nick-paul/aya-lang

.# stack.aya
.# defines the stack type

.{? type: stack
    A simple stack data structure

    Create stacks by entering a list followed by the stack constructor
    [1 2 3] stack!
.}


class ::stack


.#? ::list stack!\n  convert a list into a stack
def stack::__init__ {l meta,
    l self.:list;
}


def stack::__str__ {self,
    self.isempty {
        "stack: <- -|"
    } {
        "stack: <-"self.listPB;V;"-|"++
    } .?
}


def stack::__repr__ (stack.__str__.`)


.#? ::stack.pop\n  return the next item in the stack
def stack::pop {self,
    self.listE0= {"stack obj is empty" .D} ?
    self.listV\;
}

.#? ::stack.peek\n  return the next item in the stack without removing it from the stack
def stack::peek {self,
    self.listE0= {"stack obj is empty" .D} ?
    self.list0I
}


.#? ::stack.len\n  return the number of elements in the stack
def stack::__len__ {.listE}


.#? ::stack.isempty\n  tests if the stack is empty
def stack::isempty {.listE0=}


.#? A ::stack.add\n  add an item to the stack
def stack::__add__ {self,
    self.list.V; self
}

.#? ::stack.clear\n  clear the queue
def stack::clear {self,
    [] self.:list
}


def stack::__each__ {blk self,
    self.list :# {blk}
}


.#########
.# TESTS #
.#########

`~ {:ts,

    "stack" testset! :ts;

    {[1 2 3] stack! :T} [::stack] ts+
    {[1 2 3] stack! .pop} [1] ts+
    {:s, [1 2] stack!:s .pop; s.pop} [2] ts+
    {:s, [1 2] stack!:s .peek; s.pop} [1] ts+
    {[1 2] stack! .clear .list} [[]] ts+
    {3 [1 2] stack! + .pop} [3] ts+
    {[1 2 3] stack! E} [3] ts+
    {:s, [1] stack!:s .pop; s.isempty} [1] ts+
    {[1] stack! .isempty} [0] ts+
    {[] stack! .isempty} [1] ts+


    ts __aya__.addtest
}
