import ::csv

class ::dataframe
export ::dataframe

def dataframe::__init__ {kwargs::dict self :
        data(nil)
        colnames(nil)
        index(nil),

    kwargs ~

    [] self.:_colnames;
    [] self.:_index;
    [] self.:_data;

    .# Create using data
    data nil =! {:numrows numcols,
        data E :numrows;
        data .TE :numcols;
        data self.:_data;

        .# Column names
        colnames nil = {
            numcols self.M._gen_colnames
        } {
            colnames
        } .? self.:_colnames;

        .# Row names
        index nil = {
            numrows .R
        } {
            index
        } .? self.:_index;
    } ?

    self._check_size
}

def dataframe::_check_size {self,
    self._dataE self._indexE = ! {
        "dataframe!: data size ($(self._dataE)) and index length ($(self._indexE)) do not match" .D
    } ?

    self._data.TE self._colnamesE = ! {
        "dataframe!: data num cols ($(self._data.TE)) and length of colnames ($(self._indexE)) do not match" .D
    } ?
}

def dataframe::_gen_colnames {n::num,
    n 26 :< {
        ['a $nV+] R#P
    } {
        n 26- :n;
        "az"R#P
        n 26 .% 'a$@+K R "az"R {\P+}.pu #~ n .< K
    } .?
}

.# CSV Utils
.###########

def dataframe::from_csv {csv_dict,
    {,
        csv_dict.data :data;
        csv_dict.rownames :index;
        csv_dict.colnames :colnames;
    } dataframe!
}

def dataframe::read_csv {arg : dataframe^ csv^ ,
    .# csv.read takes a string or a kwargs dict
    arg csv.read dataframe.from_csv
}

def dataframe::_get_col_index {colname self,
    colname :T ::sym = {colname :C :colname; } ?
    self._colnames colname N\; :colindex;
    colindex :1 = {
        "Column $colname not found" .D
    } ?
    colindex
}

def dataframe::_get_col {colname self : colindex,
    colname self._get_col_index :colindex;
    self._data :# { colindex I }
}

def dataframe::_numgetindex {index::num self : dataframe^,
    {,
        [self._data.[index]]  :data;
        [self._index.[index]] :index;
        self._colnames :colnames;
    } dataframe!
}

def dataframe::__getindex__ { index self : dataframe^,
    index :T {?=,
        ::num {
            index self._numgetindex
        },
        ::str {
            index self._get_col
        },
        {"Unsupported index: $index" .D}
    }
}

.{
    aya> df
        A B C
    0 | 1 2 3
    1 | 4 5 6
    2 | 7 8 9
    aya> df.row[1]
        A B C
    0 | 4 5 6
    aya> df.row[[1 2]]
        A B C
    0 | 4 5 6
    1 | 7 8 9
.}
def dataframe::row {`({self index : data,
    self._data.[index~]:data;
    [ index~ :T ::num = { [data]:data } ? ];

    {, self._colnames:colnames data:data } dataframe!
})}


.{
    aya> df
        A B C
    0 | 1 2 3
    1 | 4 5 6
    2 | 7 8 9
    aya> "C" {5>} df.filter_on_col
        A B C
    0 | 4 5 6
    1 | 7 8 9
.}
def dataframe::filter_on_col {column condition self : colindex,
    column self._get_col_index :colindex;
    df.row[ { .[colindex] condition } ]
}


def dataframe::nrows {self,
    self._data E
}

def dataframe::ncols {self,
    self.data.[0] E
}

def dataframe::shape {self,
    [self.nrows self.ncols]
}


.# Serialization / Output
.########################

def dataframe::__str__ {self : max_idx_len,
    .# find longest index name
    self._index #{PE} .max :max_idx_len;
    .# pad indices to lo
    self._index :#{P max_idx_len .> " |" +}
    .# Zip the index and the data along each row
    self._data {J}.&
    .# Add a "" to the front for the index column
    "" self._colnames#P J
    .# Add the colum as the first elemnt in the list
    A\J
    .# Convert to a pretty matstr
    .matstr
}


def dataframe::_repr_lines {s : lines(s.lines),
    lines E 24 > {
        [lines 10 .<~ "..." lines 10 .>~]"\n"*
    } {
        s
    } .?
}


def dataframe::__repr__ {self : dataframe^,
    self.__str__ dataframe._repr_lines
}
