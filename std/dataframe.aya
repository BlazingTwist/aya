import ::csv

class ::dataframe

def dataframe::__init__ {kwargs::dict self :
        data(nil)
        colnames(nil)
        index(nil),

    kwargs .W

    [] self.:_colnames;
    [] self.:_index;
    [] self.:_data;

    .# Create using data
    data nil =! {:numrows numcols,
        data E :numrows;
        data .TE :numcols;
        data self.:_data;

        .# Column names
        colnames nil = {
            numcols self.M._gen_colnames
        } {
            colnames
        } .? self.:_colnames;

        .# Row names
        index nil = {
            numrows .R
        } {
            index
        } .? self.:_index;
    } ?

    self._check_size
}

def dataframe::_check_size {self,
    self._dataE self._indexE = ! {
        "dataframe!: data size ($(self._dataE)) and index length ($(self._indexE)) do not match" .D
    } ?

    self._data.TE self._colnamesE = ! {
        "dataframe!: data num cols ($(self._data.TE)) and length of colnames ($(self._indexE)) do not match" .D
    } ?
}

def dataframe::_gen_colnames {n::num,
    n 26 :< {
        ['a $nV+] R#P
    } {
        n 26- :n;
        "az"R#P
        n 26 .% 'a$@+K R "az"R {\P+}.pu #~ n .< K
    } .?
}

.# CSV Utils
.###########

def dataframe::from_csv {csv_dict,
    {,
        csv_dict.data :data;
        csv_dict.rownames :index;
        csv_dict.colnames :colnames;
    } dataframe!
}

def dataframe::read_csv {kwargs : dataframe^ ,
    kwargs csv.read dataframe.from_csv
}

.# Serialization / Output
.########################

def dataframe::__repr__ {self,
    [""] (self._colnames$\;) K A
    self._index #{P" |"K}
    self._data
    [2|~,.A]K
    matstr "\n"\+
}
