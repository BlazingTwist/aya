import ::csv

class ::dataframe
export ::dataframe

def dataframe::__init__ {kwargs::dict self :
        data(nil)
        colnames(nil)
        index(nil),

    kwargs ~

    [] self.:_colnames;
    [] self.:_index;
    [] self.:_data;

    .# Create using data
    data nil =! {:numrows numcols,
        data E :numrows;
        data .TE :numcols;
        data self.:_data;

        .# Column names
        colnames nil = {
            numcols self.M._gen_colnames
        } {
            colnames
        } .? self.:_colnames;

        .# Row names
        index nil = {
            numrows .R
        } {
            index
        } .? self.:_index;
    } ?

    self._check_size
}

def dataframe::_check_size {self,
    self._dataE self._indexE = ! {
        "dataframe!: data size ($(self._dataE)) and index length ($(self._indexE)) do not match" .D
    } ?

    self._data.TE self._colnamesE = ! {
        "dataframe!: data num cols ($(self._data.TE)) and length of colnames ($(self._indexE)) do not match" .D
    } ?
}

def dataframe::_gen_colnames {n::num,
    n 26 :< {
        ['a $nV+] R#P
    } {
        n 26- :n;
        "az"R#P
        n 26 .% 'a$@+K R "az"R {\P+}.pu #~ n .< K
    } .?
}

.# CSV Utils
.###########

def dataframe::from_csv {csv_dict,
    {,
        csv_dict.data :data;
        csv_dict.rownames :index;
        csv_dict.colnames :colnames;
    } dataframe!
}

def dataframe::read_csv {arg : dataframe^ csv^ ,
    .# csv.read takes a string or a kwargs dict
    arg csv.read dataframe.from_csv
}

def dataframe::_get_col {colname self : colindex,
    colname :T ::sym = {colname :C :colname; } ?
    self._colnames colname N\; :colindex;
    colindex :1 = {
        "Column $colname not found" .D
    } {
        self._data :# { colindex I }
    } .?
}

def dataframe::__getindex__ { index self : dataframe^,
    index :T {?=,
        ::num {
            "num index!":P
            {, df._data.[index]A:data
               df._colnames:colnames
               [df._index.[index]]:index
            } dataframe!
        },
        {"Unsupported index: $index" .D}
    }
}

.# Serialization / Output
.########################

def dataframe::__str__ {self,
    .# [""] (self._colnames$\;) K A
    .# self._index #{P" |"K}
    .# self._data.T
    .# [2|~,.A]K
    .# matstr "\n"\+

    self._index :#{P" |"+}          .# Add " |" to each index
    self._data {J}.&                .# Zip the index and the data along each row
    :& .[0]E self._colnames#P \.>   .# Make the colnames at least as long as the
                                    .#    number of columns including the index
    A\J                             .# Add the colum as the first elemnt in the list
    matstr                          .# Convert to a pretty matstr
}

def dataframe::__repr__ {self,
    self.__str__.repr_lines
}
