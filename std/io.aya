import ::sys


class ::path
export ::path


.# Create a new path (accepts relative or abs paths)
.# Custom constructor
{dir meta,
    .# Already a path?
    dir:T ::path = {
        dir
    } {
        .# Input is a string?
        dir:T ::str = {
            .# If direct path
            dir meta._isabs ! {
                meta.workingP "/"+ dir + :dir;
            } ?
            {, dir meta._split meta._fixhome meta._clean :dirs} meta :M
        } {
            "Cannot create path from $dir" .D
        } .?
    } .?
} path.:__new__;


.# ::path.isfile\n  Return true if path is file (last item in the path contains a ".")
def path::isfile {self,
    self.dirs.[:1] "." N :1 =! \;
}


.#? ::str ::path.add\n  append file or dir to path, if path is file, don't change
def path::__add__ {dir::str self,
    .# Modify a copy of this path
    self $ :self; ;
    .# Can only join if the path is not a file
    self.isfile ! {
    self.dirs dir path._split K
        path._clean ;
    } ?
    self
}

def path::__radd__ {\.__add__}


.# String representation of the path
def path::__str__ {self,
    self.dirs :9c * self.M.root :9c + \+
    self.isfile ! {:9c +} ?
}

(path.__str__.`,0); path.:__repr__;


.#? ::path.dec\n  Go up a directory
def path::__dec__ {self,
    self.dirs B;; self
}

.#? ::str path.readdir\n  list of file/dir names in the given path
def path::readdir {
    P""4:{sys.MZ}
}

.#? path.working\n  working directory
def path::working {:path^,
    ""2:{sys.MZ} path!
}



.#
.# Private helper methods
.#


.# ::str path.split\n  split a string using the system file sepatator and remove empty dir names
def path::_split {dir::str : path^,
    .# Split using system sep
    dir A :# {path.filesplit |~}
    .# Split using "/"
    :# {"/"|~}
    .# Remove empties
    [""] :|
}

.# dirs::list path._fixhome
.# If the path list contains a "~"
.#   find the last "~" and take all directories after it
def path::_fixhome {dirs::list : path^,
    dirs U "~" N    .# Reverse and find the first ~ (aka the last ~)

    .# Does the path contain a "~" ?
    $:1=! {
        .< U .# Take all directories before the "~" and reverse

        .# Append the home dir to the front
        path.home.dirs $\;  .# Copy home.dirs
        \K                  .# Append to front
    } {
        ;U .# Pop the -1 and put the list back
    } .?
}

.# ::str path._isabs\n  return true of the given string is an absolute path
def path::_isabs {p::str : path^,
    p "/" N 0 = \;
    p path.root :9c + N 0 = \;
    p path.root "/" + N 0 = \;
    | |
}

.# Remove all ".." by traversing the directories
def path::_clean {dirs::list : path^ i(0),
    .# Remove root and self refs (".")
    dirs [path.root "."] :| ;

    .# If there is a ".." remove the dir before it
    {{
        .# If there is a "..",
        dirs.[iB] ".." = {
            .# Remove the ".." and the dir before it
            dirs [i iB] .-;
            .# Then move the index back 2
            i2-:i;
        } ?
        ::iB
        i dirs EV <
    }W}
    .# If the above code has an error, the path is invalid
    {; []:dirs;} .K
    dirs
}



.#
.# Constants
.#

.#? path.root\n  root dir name
sys.iswindows {
    "C:"
} {
    ""
} .? path.:root;


.# Regular expression used for splitting path strings
.# If :9c is "\", return escaped "\\" otherwise return :9c
.#? path.filesplit\n  constant "\\" if windows, "/" if unix
sys.iswindows {:9c$+} {:9c} .? path.:filesplit;



""7:{sys.MZ} path! path.:home;

{, ""2:{sys.MZ} path._split :dirs} path :M path.:dfltworking;



.#########
.# TESTS #
.#########

`~ {:ts,

    "path" testset! :ts;

    {"/a/b/c" path!.dirs} [["a""b""c"]] ts+
    {"/a/b/c/.." path!.dirs} [["a""b"]] ts+
    {"/a/b/c" path! ".." + .dirs} [["a""b"]] ts+
    {"/a/b/c" path! V .dirs} [["a""b"]] ts+
    {"~/a" path!.__str__} [path.home.__str__ "a" + :9c +] ts+

    ts __aya__.addtest

}


.####################
.# FILE             #
.####################

class ::file
export ::file

def file::__init__ {filepath type::char  self,
    .# save a copy of the path
    filepath path!      self.:path ;
    .# open the stream
    self.path P type :{fstream.O} self.:id ;
}

.#? ::file.close\n  close a file. return 1 is success
def file::close {self,
    self.id 'c :{fstream.O}
}

.#? ::file.isopen\n  test if a file stream is open
def file::isopen {self,
    self.id 'i :{fstream.O} 0 =!
}

.#? ::file.isread\n  return 1 if file is an input stream
def file::isinput {self,
    self.id 'i :{fstream.O} 1 =
}

.#? ::file.iswrite\n  return 1 if file is an output stream
def file::isoutput {self,
    self.id 'i :{fstream.O} 2 =
}

.#? ::file.print\n  print to a file if it is an input stream
def file::print {s self,
    sP self.id :{fstream.O}
}

.#? ::file.println\n  print string followed by a newline tp a file
def file::println {s self,
    sP "\n" + self.id :{fstream.O}
}

.#? ::file.readchar\n  read the next char in the file, return -1 if EOF or invalid stream
def file::readchar {self,
    self.id 'b :{fstream.O}
}

.#? ::file.readline\n  read the next line in the file, return 0 is EOF or invalid stream
def file::readline {self,
    self.id 'l :{fstream.O}
}

.#? ::file.readall\n  read all text in the stream, return "" if EOF and 0 if invalid stream
def file::readall {self,
    self.id 'a :{fstream.O}
}

.#? ::file.lines\n  return a list containing the lines in the file
def file::lines {self,
    self.id 'a :{fstream.O} "\n" |
}

.#? ::file.flush\n  flush an output stream
def file::flush {self,
    self.id 'f :{fstream.O}
}

def file::__repr__ {self,
    [
        self.isopen
            {"<stream(" self.isinput {"R"} {"W"} .? "):"}
            "<closed:"
        .?
        self.path.__str__ ">"
    ]S
}


.#? stdin::file\n  standard input stream
{,
    1:id;

    .# Overloads
    1:isopen;
    0:close;
    1:isread;
    0:iswrite;
    "stdin":path;
} file :M :stdin;

.#? stdout::file\n  standard output stream
{,
    2:id;

    .# Overloads
    1:isopen;
    0:close;
    1:iswrite;
    0:isread;
    "stdout":path;
} file :M :stdout;



.# dummyfile for testing opening and closing of input streams

class ::dummyfile
export ::dummyfile

def dummyfile::__init__ {name self,
    "opened dummy file '$name'" :P
    name self.:name;
}

def dummyfile::__repr__ {self,
    "<dummyfile: $(self.name)>"
}

def dummyfile::close {self,
    "closed dummy file '$(self.name)'" :P
}

dummyfile file.:dummyfile ;
