.# Shell-like commands for Aya

import ::sys
import ::io
import ::terminal

struct ::shellresult [::value]

def shellresult::__repr__ {self,
    self.value
}

def shellresult::lines {self,
    self.value "\n" |
}


module ::shell_impl

def shell_impl::grep {res::shellresult rgx::str : shellresult^ ,
    res.lines {rgx &E0>} I
    "\n" * shellresult!
}

def shell_impl::cat {filename::str : shellresult^ ,
    filename G shellresult!
}

def shell_impl::echo {data::str : shellresult^ ,
    data shellresult!
}

exportall


.#? ls\n  print a list of files in the working dir
def ::ls {
    :{sys.wd} :{sys.readdir}
    .E 0 = {
        ; "  <no files>"
    } {
        C "\n" *
    } .?

    shellresult!
}


.#? pwd\n  print working directory
def ::pwd {path.working:P}


.#? cd dir\n  change directory
def ::cd {`(sys.cd)}


.#? mkdir S\n  create a new directory
def ::mkdir {`(sys.mkdir)}


def ::echo ({```x``~} {, shell_impl.echo.` :x } .+)
.#? cat S\n  print a file to the console
def ::cat  ({```x``~} {, shell_impl.cat.`  :x } .+)
def ::grep  ({```x``~} {, shell_impl.grep.` :x } .+)


def ::touch {`({s::str,"" s 1.G})}

def ::run {`(".aya"+G~)}

def ::clear {:terminal^, terminal.clear}


def (__aya__.interpreter)::shell {str : cmd args,
    str ' N $ :1 = {
        ;; str~
    } {
        | trim :args; :cmd;
        cmd~ args
    } .?
}
