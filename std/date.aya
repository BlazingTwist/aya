.# This file is a part of Aya: https://github.com/nick-paul/aya-lang

.# date.aya
.# Defines the date type

.{? type: date
    The date type provides operations for accessing date and time variables.
.}

export [::date ::dates]

{,

    ::date :__type__;
    1 :__pushself__;

    {{,M$:ms} date :M}:now;

    .# {in meta, [
    .#     in:T ::num = {{,in:ms} meta :M} ?
    .#     in:T ::str = {{,in "yyyy-MM-dd" :{date.parse}:ms} meta :M} ?
    .#     {"Expected S|D, recieved: $in".D}
    .# ].S }:__new__;

    {in meta,
        in :T {?=,
            ::num {{, in:ms} meta :M },
            ::str {{, in "yyyy-MM-dd" :{date.parse}:ms} meta :M},
            {"Expected ::str or ::num. recieved: $in" .D}
        }
    }:__new__;

    {.ms "MMM dd, yyyy h:mm:ss a" :{date.format}}:__repr__;
    {.__repr__}:__str__;

    {.ms :{date.desc}.day_of_week}:dayofweekid;
    {.ms :{date.desc}.day_of_week dates.weekdays\V I}:dayofweek;
    {.ms :{date.desc}.day_of_week dates.weekdaysabb\V I}:dayofweekabb;
    {.ms :{date.desc}.year}:year;
    {.ms :{date.desc}.month}:monthid;
    {.ms :{date.desc}.month dates.monthnames\I}:month;
    {.ms :{date.desc}.month dates.monthsabb\I}:monthabb;
    {.ms :{date.desc}.day_of_month}:dayofmonth;
    {.ms :{date.desc}.hour}:hour:h;
    {.ms :{date.desc}.minute}:min:m;
    {.ms :{date.desc}.second}:sec:s;
    {.ms"a":{date.format}}:ampm;

    {self unit,
        self.ms unit.ms + date!
    }:__radd__;

    {self unit,
        self.ms unit.ms - date!
    }:__rsub__;

    {.ms}:__sort__;

    .# Parse Functions
    {"MM/dd/yy" :{date.parse}}:parsemdy;

    .# String functions
    {.ms "MM/dd/yy"   :{date.format}}:mmddyy;
    {.ms "MM/dd/yyyy" :{date.format}}:mmddyyyy;
    {.ms "hh:mm aa"   :{date.format}}:timestr;

}:date;

.#? dateunit\n  static namespace defining units related to dates
{,
    [
        ["year" 31536000000]
        ["month" 2628000000]
        ["week" 604800000]
        ["day" 86400000]
        ["hour" 3600000]
        ["minute" 60000]
        ["second" 1000]
    ]:units;

    units # {u : name conv,
        u0I:name;
        u1I:conv;
        {,
            1 :__pushself__;
            {n::num meta, {,n:n} meta :M}:__new__;
            {.n x +} {, " dates.$name":x} .+ :__repr__;
            {.n conv*}.use[::conv]:ms;
            {date.__radd__.`~}:__add__;
            {date.__rsub__.`~}:__sub__;
        } name:S := ;
    };
}:dateunit;

.#? dates\n  static namespace for date related variables
{,
    .# Units
    dateunit.units # {u : name,
        u0I:name;
        "{dateunit.$name!}:$name"~
    };

    .# Week Day Names
    [
        "Sunday" "Monday" "Tuesday" "Wednesday"
        "Thursday" "Friday" "Saturday"
    ]:weekdays;
    ["Sun" "Mon" "Tue" "Wed" "Thr" "Fri" "Sat"]:weekdaysabb;

    .# Month Names
    [
        "January" "February" "March" "April"
        "May" "June" "July" "August"
        "September" "October" "November" "December"
    ]:monthnames;

    [
        "Jan" "Feb" "Mar" "Apr" "May" "Jun"
        "Jul" "Aug" "Sep" "Oct" "Nov" "Dec"
    ]:monthsabb;

}:dates;

{date.now}:now;



.#########
.# TESTS #
.#########

({:ts,

    "date" testset! :ts;

    {:date^ dates^ dateunit^, "1707-04-15" date! .mmddyy} ["04/15/07"] ts+
    {:date^ dates^ dateunit^, "1707-04-15" date! .mmddyyyy} ["04/15/1707"] ts+
    {:date^ dates^ dateunit^, "1707-04-15" date! .timestr} ["12:00 AM"] ts+
    {:date^ dates^ dateunit^, "1707-04-15" date! 2 dates.month + .month} ["June"] ts+
    {:date^ dates^ dateunit^, "1707-04-15" date! 1 dates.day - .dayofmonth} [14] ts+
    {:date^ dates^ dateunit^, "1707-04-15" date! 100 dates.year + .year} [1807] ts+
    {:date^ dates^ dateunit^, "1707-04-15" date! 2 dates.hour + .hour} [2] ts+
    {:date^ dates^ dateunit^, "1707-04-15" date! 2 dates.minute + .min} [2] ts+

    ts __aya__.addtest
})
